//
// Polymorphismus in my Extended Lox
// you can run this file easily with (feel free to play arround):
// make test
//

class Person {
init(name) {
  this.name = name;
}
whoAmI() {
  printf( "Hello, my name is " + this.name + " ");
}
}

class Parent < Person { 
  init(name, children) {
    super.init(name);
    this.children = children;
  }
}

// Functions are Firstclass in Lox 
fun fnPerson(idx) {
  household[idx].whoAmI();
}

fun fnParent(idx) {
  household[idx].whoAmI();
  var children = household[idx].children;
  printf("and my children are: ");
  for (var i=0; i<len(children); i=i+1){
    printf(children[i], " ");
  }
}

fun fnCat() {
  printf("I am the Family's Cat");
}

fun fnDog() {
  printf("And who let the dogs out? Woof Woof.");
}

// so we can put a bunch of closures in A Map:
var map = {
  "Person" : fnPerson,
  "Dog" : fnDog,
};
map["Cat"] = fnCat;
map["Parent"] = fnParent;

var p1 = Person("Bob");
var p2 = Person("James");
var p3 = Person("James");
var p4 = Parent("Jenny", ["Bob", "James", "Finn"]);
var household = [p1, p2, "Cat" , p4, p3, "Dog"];

for (var i=0; i<len(household); i=i+1) {
  // typechecking happens at runtime, so we can branch with if:
  if (typeof(household[i])=="string") {
    map[household[i]]();
  }else {
    // or use a map like above to branch over for example classes:
    var fn = map[typeof(household[i])];
    fn(i);
  }
  printf("\n");
}

p1 = "string" + 123;